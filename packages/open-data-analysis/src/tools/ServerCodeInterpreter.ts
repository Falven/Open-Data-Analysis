import { join, posix } from 'node:path';
import { writeFileSync } from 'node:fs';
import { randomUUID } from 'node:crypto';
import { StructuredTool, Tool } from 'langchain/tools';
import { ContentsManager, SessionManager } from '@jupyterlab/services';
import { IOutput } from '@jupyterlab/nbformat';
import { z } from 'zod';
import {
  addCellsToNotebook,
  executeCode,
  getOrCreatePythonSession,
  initializeManagers,
  getOrCreateNotebook,
  createServerSettings,
  isDisplayData,
} from '../utils/jupyterServerUtils.js';
import { getDirname } from '../utils/envUtils.js';

/**
 * The particular user and conversation in which the interpreter is being used.
 */
export type InterpreterOptions = {
  userId: string;
  conversationId: string;
};

/**
 * A simple example on how to use Jupyter server as a code interpreter.
 */
export class CodeInterpreter extends StructuredTool {
  name: string;
  description: string;
  schema: z.ZodObject<
    any,
    any,
    any,
    any,
    {
      [x: string]: any;
    }
  >;

  userId: string;
  conversationId: string;
  notebookName: string;
  notebookPath: string;

  contentsManager: ContentsManager;
  sessionManager: SessionManager;

  /**
   * Constructs a new CodeInterpreter Tool for a particular user and their conversation.
   * @param interpreterOptions The options for the interpreter.
   */
  constructor({ userId, conversationId }: InterpreterOptions) {
    super();

    this.name = 'python';
    // GPT4 Advanced Data Analysis prompt
    this.description =
      "When you send a message containing Python code to python, it will be executed in a stateful Jupyter notebook environment. The drive at '/mnt/data' can be used to save and persist user files. Internet access for this session is disabled. Do not make external web requests or API calls as they will fail. The tool will inform you when an image is displayed to the user. Do not try to create links to images as they will not work.";
    this.schema = z.object({
      input: z.string().describe('The python code to execute.'),
    });

    // The userId and conversationId are used to create a unique fs hierarchy for the notebook path.
    this.userId = userId;
    this.conversationId = conversationId;
    this.notebookName = `${conversationId}.ipynb`;
    this.notebookPath = posix.join(userId, this.notebookName);

    // Create single user Jupyter server settings.
    const serverSettings = createServerSettings();

    const { contentsManager, sessionManager } = initializeManagers(serverSettings);
    this.contentsManager = contentsManager;
    this.sessionManager = sessionManager;
  }

  /**
   * Saves an image to the images directory.
   * @param base64ImageData The base64 encoded image data.
   */
  saveImage(base64ImageData: string): void {
    const imageData = Buffer.from(base64ImageData, 'base64');
    const imageName = `${randomUUID()}.png`;
    const imagePath = join(getDirname(), '..', '..', 'images', imageName);
    writeFileSync(imagePath, imageData);
  }

  /**
   * Saves any images generated by the code.
   * @param outputs The code execution outputs.
   * @returns The markdown images.
   */
  saveImages(outputs: IOutput[]) {
    let markdownImages = [];
    for (const output of outputs) {
      if (isDisplayData(output)) {
        const imageOutput = output.data['image/png'];
        const imageName = this.saveImage(
          typeof imageOutput === 'object' ? JSON.stringify(imageOutput) : imageOutput,
        );
        markdownImages.push(`![Generated Image](/images/${imageName})`);
      }
    }
    return markdownImages;
  }

  /**
   * This method is called when the tool is invoked.
   * @param arg The code to execute.
   * @returns The code execution output.
   */
  async _call({ input }: { input: string }): Promise<string> {
    try {
      if (input === undefined) {
        throw new Error(`Expected code input.`);
      }

      // Get or Create the notebook if it doesn't exist.
      const notebookModel = await getOrCreateNotebook(this.contentsManager, this.notebookPath);

      // Get or create a Jupyter python kernel session.
      const session = await getOrCreatePythonSession(
        this.sessionManager,
        this.userId,
        this.notebookName,
        this.conversationId,
      );

      // Execute the code and get the result.
      const [result, outputs, executionCount] = await executeCode(session, input);

      // Save any images generated by the code.
      this.saveImages(outputs);

      // Add the code and result to the notebook.
      addCellsToNotebook(notebookModel, input, outputs, executionCount);

      // Save the notebook.
      await this.contentsManager.save(this.notebookPath, notebookModel);

      // Return the result to the Assistant.
      return result;
    } catch (error) {
      console.error(error);
      // Inform the Assistant that an error occurred.
      return `Error executing code: ${error instanceof Error ? error.message : String(error)}`;
    }
  }
}
